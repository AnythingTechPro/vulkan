// Copyright (c) 2019, The Vulkan Developers.
//
// This file is part of Vulkan.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// You should have received a copy of the MIT License
// along with Vulkan. If not, see <https://opensource.org/licenses/MIT>.

#pragma once

#include <stdlib.h>
#include <stdint.h>

#include "block.h"
#include "transaction.h"

static block_t mainnet_genesis_block = {
  .version = BLOCK_VERSION,
  .previous_hash = {
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00
  },
  .hash = {
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00
  },
  .timestamp = GENESIS_TIMESTAMP,
  .nonce = GENESIS_NONCE,
  .bits = GENESIS_BITS,
  .cumulative_emission = 0,
  .merkle_root = {
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00
  },
  .transaction_count = 0,
  .transactions = NULL
};

static input_transaction_t testnet_genesis_input_txs[] = {
  {
    .transaction = {
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00
    },
    .txout_index = 0,
    .signature = {
      0xCE, 0xCB, 0xDA, 0x94,
      0xD6, 0x66, 0x20, 0x4C,
      0x30, 0x24, 0x84, 0xC9,
      0xDA, 0xB5, 0x1F, 0x64,
      0xC1, 0x93, 0xD7, 0xD8,
      0x3C, 0xC7, 0xB8, 0x1C,
      0x94, 0xDD, 0xEE, 0x08,
      0x8C, 0x96, 0x36, 0x1E,
      0x03, 0xC0, 0x30, 0xB5,
      0xBF, 0xD2, 0xE2, 0x57,
      0x3B, 0x08, 0x13, 0x4A,
      0xAA, 0xAF, 0x36, 0xA8,
      0x83, 0x1F, 0xEC, 0xFE,
      0x11, 0xB4, 0x27, 0x11,
      0x16, 0x1D, 0xF1, 0x90,
      0x36, 0x7C, 0x12, 0x0D
    },
    .public_key = {
      0xE0, 0x72, 0x53, 0x8A,
      0x6C, 0xD1, 0x7D, 0x9B,
      0xC2, 0x6E, 0xAD, 0xA4,
      0xBD, 0x2E, 0xE8, 0x4E,
      0x75, 0x30, 0x87, 0x81,
      0x23, 0x5A, 0xC0, 0x88,
      0x38, 0xBB, 0x87, 0x8E,
      0xF1, 0xB9, 0x27, 0x65
    }
  }
};

static output_transaction_t testnet_genesis_output_txs[] = {
  {
    .amount = 6103515625,
    .address = {
      0x01, 0x4E, 0x08, 0xDD,
      0x47, 0x1E, 0xEA, 0xA0,
      0xE1, 0x3D, 0x82, 0x40,
      0x38, 0x31, 0xC4, 0xEE,
      0xB6, 0x2B, 0xF7, 0x78,
      0x23, 0xB6, 0x88, 0x84,
      0x79, 0x59, 0xFB, 0x79,
      0xC6, 0xE4, 0x9C, 0xC0,
      0xC0
    }
  }
};

static transaction_t testnet_genesis_tx = {
  .id = {
    0x22, 0xA5, 0x15, 0xAA,
    0xC5, 0x1F, 0x12, 0xC0,
    0x80, 0xCB, 0xE4, 0x80,
    0xC8, 0xD9, 0x62, 0xD7,
    0x07, 0x31, 0xC5, 0xD7,
    0x79, 0xF8, 0x0E, 0x81,
    0x0B, 0x89, 0xBE, 0xA7,
    0xA6, 0x03, 0x22, 0xC5
  },
  .txin_count = 0,
  .txout_count = 0,
  .txins = NULL,
  .txouts = NULL
};

static block_t testnet_genesis_block_template = {
  .version = BLOCK_VERSION,
  .previous_hash = {
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00
  },
  .hash = {
    0x00, 0x00, 0x00, 0x00,
    0xF3, 0xF1, 0x2C, 0xDC,
    0x17, 0x10, 0xFE, 0x46,
    0x49, 0xA2, 0x5C, 0x2D,
    0x32, 0x2E, 0xc1, 0xFA,
    0x93, 0xFD, 0x20, 0xAB,
    0xB5, 0xBE, 0x44, 0x74,
    0x39, 0xD0, 0xBE, 0x6F
  },
  .timestamp = TESTNET_GENESIS_TIMESTAMP,
  .nonce = TESTNET_GENESIS_NONCE,
  .bits = TESTNET_GENESIS_BITS,
  .cumulative_emission = 6103515625,
  .merkle_root = {
    0x22, 0xA5, 0x15, 0xAA,
    0xC5, 0x1F, 0x12, 0xC0,
    0x80, 0xCB, 0xE4, 0x80,
    0xC8, 0xD9, 0x62, 0xD7,
    0x07, 0x31, 0xC5, 0xD7,
    0x79, 0xF8, 0x0E, 0x81,
    0x0B, 0x89, 0xBE, 0xA7,
    0xA6, 0x03, 0x22, 0xC5
  },
  .transaction_count = 0,
  .transactions = NULL
};

static block_t *testnet_genesis_block = NULL;

#define NUM_TESTNET_GENESIS_TXINS (sizeof(input_transaction_t) / sizeof(testnet_genesis_input_txs))
#define NUM_TESTNET_GENESIS_TXOUTS (sizeof(output_transaction_t) / sizeof(testnet_genesis_output_txs))

block_t *get_genesis_block(void);
