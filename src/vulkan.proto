// Copyright (c) 2019, The Vulkan Developers.
//
// This file is part of Vulkan.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// You should have received a copy of the MIT License
// along with Vulkan. If not, see <https://opensource.org/licenses/MIT>.

syntax = "proto3";

message PInputTransaction
{
  bytes transaction = 1;
  int32 txout_index = 2;
  bytes signature = 3;
  bytes public_key = 4;
}

message POutputTransaction
{
  int64 amount = 1;
  bytes address = 2;
}

message PTransaction
{
  bytes id = 1;
  repeated PInputTransaction txins = 2;
  repeated POutputTransaction txouts = 3;
}

message PUnspentOutputTransaction
{
  int64 amount = 1;
  bytes address = 2;
  bool spent = 3;
}

message PUnspentTransaction
{
  bytes id = 1;
  bool coinbase = 2;
  repeated PUnspentOutputTransaction unspent_txouts = 3;
}

message PBlock
{
  int32 version = 1;
  int32 bits = 2;

  bytes previous_hash = 3;
  bytes hash = 4;

  int32 timestamp = 5;
  int32 nonce = 6;

  bytes merkle_root = 7;

  repeated PTransaction transactions = 9;
}

message PWallet
{
  bytes secret_key = 1;
  bytes public_key = 2;
  bytes address = 3;
  int64 balance = 4;
}

message PEmpty
{

}

message PPacket
{
  int32 id = 1;
  int32 message_size = 2;
  bytes message = 3;
}

message MIncomingBlock
{
  PBlock block = 1;
}

message MIncomingTransaction
{
  PTransaction transaction = 1;
}

message MGetBlockHeightRequest
{

}

message MGetBlockHeightResponse
{
  int64 height = 1;
}

message MGetBlockRequest
{
  int64 height = 1;
  bytes hash = 2;
}

message MGetBlockResponse
{
  int64 height = 1;
  PBlock block = 2;
}

message MGetTransactionRequest
{
  bytes id = 1;
  bytes input_hash = 2;
}

message MGetTransactionResponse
{
  PTransaction transaction = 1;
}
